///
/// pine
/// Copyright (C) 2014 Miguel Martin (miguel@miguel-martin.com)
///
/// Permission is hereby granted, free of charge, to any person obtaining a copy
/// of this software and associated documentation files (the "Software"), to deal
/// in the Software without restriction, including without limitation the rights
/// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
/// copies of the Software, and to permit persons to whom the Software is
/// furnished to do so, subject to the following conditions:
///
/// The above copyright notice and this permission notice shall be included in
/// all copies or substantial portions of the Software.
///
/// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
/// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
/// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
/// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
/// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
/// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
/// THE SOFTWARE.
///

#ifndef RUNGAME_HPP
#define RUNGAME_HPP

#include <type_traits>

#include <pine/time.hpp>
#include <pine/types.hpp>
#include <pine/Game.hpp>

namespace pine
{
	/// Runs the game
	/// \param game The game you wish to run
	/// \return The error code generated by the game
	template <class TGame>
	int RunGame(TGame& game)
	{
		const float MAX_FRAME_TIME = 1 / 4.f;
		const float DELTA_TIME = 1 / 60.f;
		Seconds currentTime = 0; // Holds the current time
		Seconds accumulator = 0; // Used to accumlate time in the game loop
		
		while(game.isRunning())
		{
			game.frameStart();
			
			Seconds newTime = pine::time_now();
			Seconds frameTime = newTime - currentTime;
			currentTime = newTime;
			
			// cap the loop delta time
			if(frameTime >= MAX_FRAME_TIME)
			{
				frameTime = MAX_FRAME_TIME;
			}
			
			accumulator += frameTime;
			
			// Update our game
			while(accumulator >= DELTA_TIME)
			{
				game.update(DELTA_TIME); // update the game (with the constant delta time)
				accumulator -= DELTA_TIME; // decrease the accumulator
			}
			
			game.frameEnd();
		}
		
		return game.getErrorState();
	}

    namespace detail
    {
        template <class TGame, class TEngine>
        struct GameRunner
        {
            int operator()(int argc, char* argv[])
            {
                TGame game;
                TEngine engine;

                engine.initialize(argc, argv);
                game.setEngine(engine);
                game.initialize(argc, argv);
                return RunGame(game);
            }
        };

        template <class TGame>
        struct GameRunner<TGame, void>
        {
            int operator()(int argc, char* argv[])
            {
                TGame game;
                game.initialize(argc, argv);

                return RunGame(game);
            }
        };
    }

    // game with engine
    template <class TGame>
    int RunGame(int argc, char* argv[])
    {
        return detail::GameRunner<TGame, typename TGame::Engine>()(argc, argv);
    }

    /*
    template <class TGame> 
    typename std::enable_if<std::is_base_of<detail::GameWithoutEngine, TGame>::value, int>::type
    RunGame(int argc, char* argv[])
    {
        TGame game;
        game.initialize(argc, argv);
        return RunGame(game);
    }

    template <class TGame>
    typename std::enable_if<std::is_base_of<detail::GameWithEngine<typename TGame::Engine>, TGame>::value, int>::type
    RunGame(int argc, char* argv[])
    {
        TGame game;
        typename TGame::Engine engine;
        engine.initalize(argc, argv);
        game.setEngine(engine);
        game.initialize(argc, argv);

        return RunGame(game);
    }
    */
}

#endif // PINE_RUNGAME_HPP
