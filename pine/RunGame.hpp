///
/// anax
/// An open source C++ entity system.
///
/// Copyright (C) 2013 Miguel Martin (miguel.martin7.5@hotmail.com)
///
/// Permission is hereby granted, free of charge, to any person obtaining a copy
/// of this software and associated documentation files (the "Software"), to deal
/// in the Software without restriction, including without limitation the rights
/// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
/// copies of the Software, and to permit persons to whom the Software is
/// furnished to do so, subject to the following conditions:
///
/// The above copyright notice and this permission notice shall be included in
/// all copies or substantial portions of the Software.
///
/// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
/// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
/// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
/// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
/// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
/// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
/// THE SOFTWARE.
///

#ifndef __RUNGAME_HPP__
#define __RUNGAME_HPP__

#include <pine/time.hpp>
#include <pine/types.hpp>
#include <pine/Game.hpp>
#include <pine/GameWithEngine.hpp>

namespace pine
{
	/// Runs the game
	/// \param game The game you wish to run
	/// \return The error code generated by the game
	template <typename T>
	int RunGame(Game<T>& game)
	{
		const float MAX_FRAME_TIME = 1 / 4.f;
		const float DELTA_TIME = 1 / 60.f;
		Seconds currentTime = 0; // Holds the current time
		Seconds accumulator = 0; // Used to accumlate time in the game loop
		
		while(game.running())
		{
			game.frame_begin();
			
			Seconds newTime = pine::time_now();
			Seconds frameTime = newTime - currentTime;
			currentTime = newTime;
			
			// cap the loop delta time
			if(frameTime >= MAX_FRAME_TIME)
			{
				frameTime = MAX_FRAME_TIME;
			}
			
			accumulator += frameTime;
			
			// Update our game
			while(accumulator >= DELTA_TIME)
			{
				game.update(DELTA_TIME); // update the game (with the constant delta time)
				accumulator -= DELTA_TIME; // decrease the accumulator
			}
			
			game.frame_end();
		}
		
		return game.error_state();
	}

	template <typename TGame>
	int RunGame(int argc, char* argv[])
	{
        TGame game;
        game.initialize(argc, argv);
		return RunGame(game);
	}
    
	template <typename TGame>
	int RunGame()
	{
		return RunGame<TGame>(0, nullptr);
	}

    template <class TGameConcept, class TEngineConcept = typename TGameConcept::Engine>
    int RunGame(GameWithEngine<TGameConcept, TEngineConcept>& game, int* argc, char* argv[])
    {
        TEngineConcept engine;
        game.initialize(engine, argc, argv);
        return RunGame(game);
    }

    template <class TGameConcept, class TEngineConcept = typename TGameConcept::Engine>
    int RunGame(GameWithEngine<TGameConcept, TEngineConcept>& game)
    {
        return RunGame(game, 0, nullptr);
    }

    /*
    template <class TGameConcept, class TEngineConcept = typename TGameConcept::Engine>
    std::enable_if<std::is_base_of<GameWithEngine<TGameConcept, TEngineConcept>, TGameConcept>::value, int>::value
    RunGame(int argc, char* argv[])
    {
        TEngineConcept engine;
        TGameConcept game;
        game.initialize(engine, argc, argv);
        return RunGame(game, 0, nullptr);
    }
    template <class TGameConcept, class TEngineConcept = typename TGameConcept::Engine>
    std::enable_if<std::is_base_of<GameWithEngine<TGameConcept, TEngineConcept>, TGameConcept>::value, int>::value
    RunGame()
    {
        return RunGame<TGameConcept, TEngineConcept>(0, nullptr);
    }

    */
}

#endif // __RUNGAME_HPP__
